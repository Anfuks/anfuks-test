"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[4638],{3905:function(t,e,a){a.d(e,{Zo:function(){return m},kt:function(){return E}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function N(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),d=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=d(t.components);return n.createElement(p.Provider,{value:e},t.children)},o={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,m=N(t,["components","mdxType","originalType","parentName"]),u=d(a),E=r,k=u["".concat(p,".").concat(E)]||u[E]||o[E]||l;return a?n.createElement(k,i(i({ref:e},m),{},{components:a})):n.createElement(k,i({ref:e},m))}));function E(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=u;var N={};for(var p in e)hasOwnProperty.call(e,p)&&(N[p]=e[p]);N.originalType=t,N.mdxType="string"==typeof t?t:r,i[1]=N;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6366:function(t,e,a){a.r(e),a.d(e,{assets:function(){return m},contentTitle:function(){return p},default:function(){return E},frontMatter:function(){return N},metadata:function(){return d},toc:function(){return o}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],N={sidebar_position:7},p="Appendix",d={unversionedId:"buildonminima/txntutorial/appendix",id:"buildonminima/txntutorial/appendix",title:"Appendix",description:"Here is a breakdown of the simple and complete KISSVM language.",source:"@site/docs/buildonminima/txntutorial/appendix.md",sourceDirName:"buildonminima/txntutorial",slug:"/buildonminima/txntutorial/appendix",permalink:"/docs/buildonminima/txntutorial/appendix",editUrl:"https://github.com/minima-global/minidocs/docs/buildonminima/txntutorial/appendix.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Tokens",permalink:"/docs/buildonminima/txntutorial/tokens"},next:{title:"Incentive Program",permalink:"/docs/earnrewards/minimaincentiveprogram"}},m={},o=[{value:"Grammar",id:"grammar",level:2},{value:"Globals",id:"globals",level:2},{value:"Functions",id:"functions",level:2}],u={toc:o};function E(t){var e=t.components,a=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"appendix"},"Appendix"),(0,l.kt)("p",null,"Here is a breakdown of the simple and complete KISSVM language."),(0,l.kt)("h2",{id:"grammar"},"Grammar"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Grammar"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ADDRESS"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ADDRESS ( BLOCK )")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"BLOCK"),(0,l.kt)("td",{parentName:"tr",align:"left"},"STATEMENT_1 STATEMENT_2 ... STATEMENT_n")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"STATEMENT"),(0,l.kt)("td",{parentName:"tr",align:"left"},"LET VARIABLE = EXPRESSION ","|"," LET ( EXPRESSION_1 EXPRESSION_2 ... EXPRESSION_n ) = EXPRESSION ","|"," IF EXPRESSION THEN BLOCK ","[ELSEIF EXPRESSION THEN BLOCK]","* ","[ELSE BLOCK]"," ENDIF ","|"," WHILE EXPRESSION DO BLOCK ENDWHILE ","|"," EXEC EXPRESSION ","|"," MAST EXPRESSION ","|"," ASSERT EXPRESSION ","|"," RETURN EXPRESSION")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"EXPRESSION"),(0,l.kt)("td",{parentName:"tr",align:"left"},"RELATION")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"LOGIC"),(0,l.kt)("td",{parentName:"tr",align:"left"},"OPERATION EQ OPERATION  ","|"," OPERATION NEQ OPERATION  ","|"," OPERATION GT OPERATION  ","|"," OPERATION GTE OPERATION  ","|"," OPERATION LT OPERATION  ","|"," OPERATION LTE OPERATION  ","|"," OPERATION")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"OPERATION"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ADDSUB & ADDSUB ","|"," ADDSUB ","|"," ADDSUB ","|"," ADDSUB ^ ADDSUB ","|"," ADDSUB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ADDSUB"),(0,l.kt)("td",{parentName:"tr",align:"left"},"MULDIV + MULDIV ","|"," MULDIV - MULDIV ","|"," MULDIV % MULDIV ","|"," MULDIV << MULDIV ","|"," MULDIV >> MULDIV ","|"," MULDIV")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"MULDIV"),(0,l.kt)("td",{parentName:"tr",align:"left"},"PRIME * PRIME ","|"," PRIME / PRIME ","|"," PRIME")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"PRIME"),(0,l.kt)("td",{parentName:"tr",align:"left"},"NOT PRIME ","|","  NEG PRIME ","|"," NOT BASEUNIT ","|"," NEG BASEUNIT ","|"," BASEUNIT")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"BASEUNIT"),(0,l.kt)("td",{parentName:"tr",align:"left"},"VARIABLE ","|"," VALUE ","|"," -NUMBER ","|"," GLOBAL ","|"," FUNCTION ","|"," ( EXPRESSION )")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"VARIABLE"),(0,l.kt)("td",{parentName:"tr",align:"left"},"[a-z]","+")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"VALUE"),(0,l.kt)("td",{parentName:"tr",align:"left"},"NUMBER ","|"," HEX ","|"," STRING ","|"," BOOLEAN")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"NUMBER"),(0,l.kt)("td",{parentName:"tr",align:"left"},"^","[0-9]","+(","\\",".","[0-9]","+)?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"HEX"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0x","[0-9a-fA-F]","+")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"STRING"),(0,l.kt)("td",{parentName:"tr",align:"left"},"[UTF8_String]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"BOOLEAN"),(0,l.kt)("td",{parentName:"tr",align:"left"},"TRUE ","|"," FALSE")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"FALSE"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"TRUE"),(0,l.kt)("td",{parentName:"tr",align:"left"},"NOT FALSE")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"GLOBAL"),(0,l.kt)("td",{parentName:"tr",align:"left"},"@BLOCK ","|"," @BLOCKMILLI ","|"," @CREATED ","|"," @COINAGE ","|"," @INPUT ","|"," @AMOUNT ","|"," @ADDRESS ","|"," @TOKENID ","|"," @COINID ","|"," @SCRIPT ","|"," @TOTIN ","|"," @TOTOUT")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"FUNCTION"),(0,l.kt)("td",{parentName:"tr",align:"left"},"FUNC ( EXPRESSION_1 EXPRESSION_2 .. EXPRESSION_n )")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"FUNC"),(0,l.kt)("td",{parentName:"tr",align:"left"},"CONCAT ","|"," LEN ","|"," REV ","|"," SUBSET ","|"," GET ","|"," EXISTS ","|"," OVERWRITE ","|"," CLEAN ","|"," UTF8 ","|"," ASCII ","|"," REPLACE ","|"," SUBSTR ","|"," BOOL ","|"," HEX ","|"," NUMBER ","|"," STRING ","|"," ADDRESS ","|"," ABS ","|"," CEIL ","|"," FLOOR ","|"," MIN ","|"," MAX ","|"," INC ","|"," DEC ","|"," SIGDIG ","|"," POW ","|"," BITSET ","|"," BITGET ","|"," BITCOUNT ","|"," PROOF ","|"," KECCAK ","|"," SHA2 ","|"," SHA3 ","|"," FUNCTION ","|"," SUMINPUT ","|"," SUMOUTPUT ","|"," SIGNEDBY ","|"," MULTISIG ","|"," CHECKSIG ","|"," GETOUTADDR ","|"," GETOUTAMT ","|"," GETOUTTOK ","|"," GETOUTKEEPSTATE ","|"," VERIFYOUT ","|"," GETINADDR ","|"," GETINAMT ","|"," GETINTOK ","|"," GETINID ","|"," VERIFYIN ","|"," STATE ","|"," PREVSTATE ","|"," SAMESTATE")))),(0,l.kt)("h2",{id:"globals"},"Globals"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Global"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@BLOCK"),(0,l.kt)("td",{parentName:"tr",align:null},"the current block number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@BLOCKMILLI"),(0,l.kt)("td",{parentName:"tr",align:null},"the current block time in milliseconds since Jan 1 1970")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@CREATED"),(0,l.kt)("td",{parentName:"tr",align:null},"the block this coin was created in")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@COINAGE"),(0,l.kt)("td",{parentName:"tr",align:null},"the difference in @BLOCK and @CREATED")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@INPUT"),(0,l.kt)("td",{parentName:"tr",align:null},"Input index of a coin used in the transaction. First input coin has an index of 0.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@COINID"),(0,l.kt)("td",{parentName:"tr",align:null},"the coinid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@AMOUNT"),(0,l.kt)("td",{parentName:"tr",align:null},"the amount")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@ADDRESS"),(0,l.kt)("td",{parentName:"tr",align:null},"the address")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@TOKENID"),(0,l.kt)("td",{parentName:"tr",align:null},"the tokenid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@SCRIPT"),(0,l.kt)("td",{parentName:"tr",align:null},"the script of this coin")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@TOTIN"),(0,l.kt)("td",{parentName:"tr",align:null},"the total number of input coins")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"@TOTOUT"),(0,l.kt)("td",{parentName:"tr",align:null},"the total number of output coins")))),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CONCAT ( HEX_1 HEX_2 ... HEX_n )"),(0,l.kt)("td",{parentName:"tr",align:null},"Concatenate the HEX values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"LEN ( HEX / SCRIPT )"),(0,l.kt)("td",{parentName:"tr",align:null},"Length of the data")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"REV ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Reverse the data")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SUBSET ( HEX NUMBER NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the HEX subset of the data - start - length")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OVERWRITE ( HEX NUMBER HEX NUMBER NUMBER)"),(0,l.kt)("td",{parentName:"tr",align:null},"Copy bytes from the first HEX and pos to the second HEX and pos, length the last NUMBER")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GET ( NUMBER NUMBER .. NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the array value set with LET ( EXPRESSION EXPRESSION .. EXPRESSION )1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"EXISTS ( NUMBER NUMBER .. NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Does the array value exists")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ADDRESS ( STRING )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the address of the script")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"REPLACE ( STRING STRING STRING )"),(0,l.kt)("td",{parentName:"tr",align:null},"Replace in 1st string all occurrence of 2nd string with 3rd")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SUBSTR ( NUMBER NUMBER STRING)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get the substring")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CLEAN ( STRING )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return a CLEAN version of the script")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"UTF8 ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Convert the HEX value to a UTF8 string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ASCII ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Convert the HEX value to an ASCII string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BOOL ( VALUE )"),(0,l.kt)("td",{parentName:"tr",align:null},"Convert to TRUE or FALSE value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"HEX ( SCRIPT )"),(0,l.kt)("td",{parentName:"tr",align:null},"Convert SCRIPT to HEX")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NUMBER ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Convert HEX to NUMBER")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"STRING ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Convert a HEX value to SCRIPT")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ABS ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Convert SCRIPT to HEX")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NUMBER ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the absolute value of a number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CEIL ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the number rounded up")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"FLOOR ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the number rounded down")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MIN ( NUMBER NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the minimum value of the 2 numbers")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MAX ( NUMBER NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the maximum value of the 2 numbers")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INC ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Increment a number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DEC ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Decrement a number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"POW ( NUMBER NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the power of N of a number. N must be a whole number.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SIGDIG ( NUMBER NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Set the significant digits of the number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BITSET ( HEX NUMBER BOOLEAN )"),(0,l.kt)("td",{parentName:"tr",align:null},"Set the value of the BIT at that Position to 0 or 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BITGET ( HEX NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Get the BOOLEAN value of the bit at the position.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BITCOUNT ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Count the number of bits set in a HEX value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PROOF ( HEX HEX HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Check the data, mmr proof, and root match. Same as mmrproof on Minima.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"KECCAK ( HEX ","|"," STRING )"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the KECCAK value of the HEX value.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SHA2 ( HEX ","|"," STRING )"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the SHA2 value of the HEX value.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SHA3 ( HEX ","|"," STRING )"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the SHA3 value of the HEX value.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SIGNEDBY ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the transaction is signed by this public key")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MULTISIG ( NUMBER HEX1 HEX2 .. HEXn )"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the transaction is signed by N of the public keys")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CHECKSIG ( HEX HEX HEX)"),(0,l.kt)("td",{parentName:"tr",align:null},"Check public key, data and signature")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GETOUTADDR ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the HEX address of the specified output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GETOUTAMT ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the amount of the specified output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GETOUTTOK ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the token id of the specified output")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GETOUTKEEPSTATE ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Is the output keeping the state")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"VERIFYOUT ( NUMBER HEX NUMBER HEX BOOL )"),(0,l.kt)("td",{parentName:"tr",align:null},"Verify the output has the specified address, amount, tokenid and keepstate")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GETINADDR ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the HEX address of the specified input")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GETINAMT ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the amount of the specified input")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GETINTOK ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the token id of the specified input")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"VERIFYIN ( NUMBER HEX NUMBER HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Verify the input has the specified address, amount and tokenid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"STATE ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the state value for the given number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PREVSTATE ( NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return the state value stored in the coin MMR data - when the coin was created.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SAMESTATE ( NUMBER NUMBER )"),(0,l.kt)("td",{parentName:"tr",align:null},"Return TRUE if the previous state and current state are the same for the start and end positions")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SUMINPUTS ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Sum the input values of this token type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SUMOUTPUTS ( HEX )"),(0,l.kt)("td",{parentName:"tr",align:null},"Sum the output values of this token type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"FUNCTION ( STRING VALUE1 VALUE2.. VALUEn )"),(0,l.kt)("td",{parentName:"tr",align:null},"Generic Function. Run the script after replacing $1, $2.. $n in the script with the provided parameters and use the variable 'returnvalue' as the returned result.")))))}E.isMDXComponent=!0}}]);