"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[4679],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1631:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:1},s="Start a Private Node",p={unversionedId:"buildonminima/startaprivatenode",id:"buildonminima/startaprivatenode",title:"Start a Private Node",description:"For development purposes, it can be useful to run one or more private test nodes stimulating network traffic. Starting these nodes from Genesis will also give you 1 billion coins to test transactions with.",source:"@site/docs/buildonminima/startaprivatenode.md",sourceDirName:"buildonminima",slug:"/buildonminima/startaprivatenode",permalink:"/docs/buildonminima/startaprivatenode",editUrl:"https://github.com/minima-global/minidocs/docs/buildonminima/startaprivatenode.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Troubleshooting",permalink:"/docs/runanode/troubleshooting"},next:{title:"Introduction",permalink:"/docs/buildonminima/dapptutorial/buildintro"}},d={},u=[{value:"Optional start up parameters",id:"optional-start-up-parameters",level:4},{value:"General",id:"general",level:4},{value:"Folders",id:"folders",level:4},{value:"MiniDapp System (mds)",id:"minidapp-system-mds",level:4},{value:"RPC",id:"rpc",level:4},{value:"Test nodes",id:"test-nodes",level:4},{value:"Mobile",id:"mobile",level:4},{value:"Debugging",id:"debugging",level:4},{value:"Help",id:"help",level:4}],m={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"start-a-private-node"},"Start a Private Node"),(0,i.kt)("p",null,"For development purposes, it can be useful to run one or more private test nodes stimulating network traffic. Starting these nodes from Genesis will also give you 1 billion coins to test transactions with. "),(0,i.kt)("p",null,"To start a private node from genesis:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Node 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"java -jar minima.jar -data minidata1 -basefolder minidata1 -test -nop2p -genesis\n")),(0,i.kt)("p",null,"This will start a node on the default ports of 9001-5. "),(0,i.kt)("p",null,"To create a second node to test transactions between two nodes"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Node 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"java -jar minima.jar -data minidata2 -basefolder minidata2 -test -nop2p -clean -port 10001 -connect 127.0.0.1:9001\n")),(0,i.kt)("p",null,"If you need to quit Minima and wish to restart it without deleting old data, use:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Node 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"java -jar minima.jar -data minidata1 -basefolder minidata1 -test -nop2p\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Node 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"java -jar minima.jar -data minidata2 -basefolder minidata2 -test -nop2p -connect 127.0.0.1:9001\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Parameters used")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"-data [foldername/path]"))," : the data folder where all the config files for this node are stored. Default is a hidden .minima folder under the user's home directory. If you want to specify a folder not in the user's home directory, you must use the complete path.",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"-basefolder [foldername/path]"))," : specify a default file creation / backup / restore folder. Default is the user's home directory. Can be the same as the data folder provided.",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"-nop2p"))," : Disable the automatic P2P system",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"-test"))," : uses test parameters e.g. faster block times",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"-genesis"))," : start the node from the genesis block (automatically uses -clean)",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"-connect [ip:port]"))," : Disable the automatic P2P system and create your own network by manually connecting to this list of host:port",(0,i.kt)("br",null))))),(0,i.kt)("h4",{id:"optional-start-up-parameters"},"Optional start up parameters"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Expand to see full list of start up parameters"),(0,i.kt)("p",null,"The following start up parameters can optionally be specified when starting your node. "),(0,i.kt)("p",null,"To add/remove parameters after a node has been started, you must ",(0,i.kt)("inlineCode",{parentName:"p"},"quit")," the node and restart it, adding/removing the required parameters. "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"[]")," square brackets indicate where an input is required, ",(0,i.kt)("strong",{parentName:"p"},"the brackets should not be included.")),(0,i.kt)("h4",{id:"general"},"General"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-clean")," : CAREFUL! Clears existing data, starts a new fresh node. All coins will be lost.",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-port [port]")," : specify the initial port for Minima to use. Range used will be the specified port +4. Default is 9001-9005.",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-host [ipaddress]")," : specify the host IP",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-dbpassword [yourdbpassword]")," : Main Wallet / SQL AES password - MUST be specified on first launch. ",(0,i.kt)("strong",{parentName:"li"},"CANNOT be changed later.")," ",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-allowallip")," : Allow all IPs for Maxima / Networking. Local IPs won't be allowed otherwise.",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-archive")," : Run an Archive node - store all archive data / the cascade to allow for resyncs from this node",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-daemon")," : Run in daemon mode with no stdin input (if running Minima as a background service)",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-isclient")," : Tells the P2P System that this node can't accept incoming connections",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-server")," : Use Server settings - this node can accept incoming connections",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-desktop")," : Use Desktop settings - this node can't accept incoming connections",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"folders"},"Folders"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-data [foldername/path]")," : the data folder where all the config files for this node are stored. Default is a hidden .minima folder under the user's home directory. If you want to specify a folder not in the user's home directory, you must use the complete path. ",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-basefolder [foldername/path]")," : specify a default file creation / backup / restore folder. Default is the user's home directory. Can be the same as the ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," folder provided.",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"minidapp-system-mds"},"MiniDapp System (mds)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-mdsenable")," : enable the MiniDapp System (default port 9003)",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-mdspassword [yourmdspassword]")," : specify the mds login password ",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-mdsinit [foldername/path]")," : specify a folder of miniDAPPs",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-mdswrite [minidapp]")," : give an initial miniDAPP WRITE access ",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"rpc"},"RPC"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-rpcenable")," : enable remote procedure call",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-rpcssl")," : use Self Signed SSL cert to run RPC",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-rpcpassword [yourrpcpassword]")," : set Basic Auth password for RPC calls ( Use with SSL / stunnel ). Only secure if used with SSL.",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-rpcclrf")," : use CRLF at the end of the RPC headers (NodeJS)",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"test-nodes"},"Test nodes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-genesis")," : start the node from the genesis block (automatically uses -clean)",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-test")," : uses test parameters e.g. faster block times",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-connect [ip:port,ip:port]")," : Disable the automatic P2P system and create your own network by manually connecting to this list of host:port",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-nop2p")," : Disable the automatic P2P system",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-noconnect")," : Stops the P2P system from connecting to other nodes until it has been connected to",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-nosyncibd")," : Do not sync IBD (for testing)",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"mobile"},"Mobile"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-mobile")," : Sets this device to a mobile device - used for metrics only",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-limitbandwidth")," : Limit the amount sent for archive sync",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-noshutdownhook")," : Do not use the shutdown hook (Android)",(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"debugging"},"Debugging"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-p2p-log-level-info")," : Set the P2P log level to info",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-p2p-log-level-debug")," : Set the P2P log level to debug")),(0,i.kt)("h4",{id:"help"},"Help"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-showparams")," : Show relevant startup params on launch",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-help")," : print help for the start up parameters"))))}c.isMDXComponent=!0}}]);